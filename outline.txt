Introduction to Git | Glenn Ansley | @glennansley | NCSU DELTA <http://delta.ncsu.edu>
-------------------

===========
= Outline =
===========
* Introduction						      Outline of the presentation
* What is Git?						      Version Control, Collaboration
* How does git control versioning?	Distributed v. Central and DELTA storage v. DAG storage
* Pros and cons to Git				   Advantages and drawbacks compared to other systems
* How do you get Git?				   A couple common methods to install git
* Basic Concepts: Your Repo			The internal organization of a git repository
* Basic Concepts: Your Branches		What is a branch? What is its purpose?
* Basic Concepts: Your Workflow		Some common workflows for individuals and teams
* How to: Collaboarte with others	Github.com
* How to: Setup your environment	   Common tools for working with Git
* How to: Create a new repo			Git commands and examples
* How to: Get repo information		Status, Diffs, Logs
* How to: Add data to your repo		Adding files, Committing files, Pushing / Pulling files
* How to: Utilize Git Branches		List, create, modify, merge, rebase, delete
* Online Resources					   Several online resources for using git
* Questions							      Q & A

=================
= Introduction =
=================
* Glenn Ansley, DELTA
* Experience with Git
* Overview of Outline

=================
= What is Git? =
=================
* How many people have used Git in the past?
* How many people have used a different VCS?
* Can someone tell us what Git is in a couple of sentances?
    * It's a tool used to track file revisions - versioning and history
    * Especially powerful in instance involving multiple contributors to the files
* Git's creator, origin, and popularity

=====================================
= How does git control versioning?  =
=====================================
* There are two types of versioning
    * DELTA         - Each new version is a diff of the previous version
    * DAG storage   - Directed Acyclic Graph - stores a new version of the file with every commit
* There are different ways to manage these revisions
    * Local         - Stored locally on your machine
    * Central       - Think client / server
    * Distributed   - Peer to Peer rather than client / server
* Examples of different combinations
    * DELTA/Local   - RCS
    * DELTA/Central - CVS, SVN
    * DELTA/Distrib - Mercurial
    * DAG/Local     - cp -r
    * DAG/Central   - Git

========================
= Pros and Cons to Git =
========================
* Pros
    * Fast
    * Local Commits
    * Branching (or rather remerging)
    * One .git rather than multiple .SVN folders
    * Multiple repositories
    * Easy to start new repositories
    * Flexible workflow
* Cons
    * No built-in access control
    * Learning curve is a bit steeper
    * Weaker windows / GUI tools and documentation
    * Large command base
    * Must checkout complete repo

=======================
= How do you get Git? =
=======================
* Official  - http://git-scm.com/download
* Linux     - yum or aptitude install git-core
* Mac OSX   - DMG package. Lion and Snow Leopard didn't ship with git
* Windows   - Git installers
* http://book.git-scm.com/2_installing_git.html
